{
    "docs": [
        {
            "location": "/",
            "text": "PyQuran: The Python package for Quranic Analysis\n\n\nPyQuran is a package which provides tools for \nQuranic Analysis\n.\n\n\nIt is still a small package which needs a lot of your effort. We believe that it\nis a seed of a fundamental general package for\ncomputations on \nQuran\n with Python, even at the most basic level which simply retrieving Quran text.\n\n\nBefore Islam\n, Arabic letters  were without  dots\u2014\n\nrasm\n, which resulted in ambiguty, two or three\nletters had the same rasm/form/shape/look. \n\n\nMuslims have decided to remove this ambiguity by adding\ndots above or below each letter of the ones which share the same rasm. Now each letter has a unique form. By the way,\noriginally, \nQuran\n was written without dots on the letters.\n\n\nTo enable you to use both modern system or other, we introduce \nalphabetical systems\n,\nIt is a dynamic construction of letters\u2014\n\nAlphabetical Systems\n.\n\n\nCurrent Features\n\n\n\n\nQuran Retrieving.\n\n\nAdvanced Searching, by Text and Diacritics Patterns.\n\n\nBuckwalter Transliteration, back and forth.\n\n\nMultiple \nalphabetical systems\n.\n\n\nWords Frequency Table \u0627\u0644\u0645\u0639\u062c\u0645 \u0627\u0644\u062a\u0631\u062f\u062f\u0649 \u0644\u0644\u0623\u0644\u0641\u0627\u0638 .\n\n\n\n\nInstall\n\n\n\n\nFrom \nPyPI\n: \n$ pip3 install pyquran\n\n\nFrom Source: \n$ python3 setup.py install\n\n\n\n\nDependencies\n\n\n\n\nnumpy\n\n\npyarabic\n\n\n\n\nQuran Corpus\n\n\nWe use \ntanzil\n Quran Corpus (\nUthmani Text\n), it is in \nUTF-8\n encoding. You\ncan find all unique characters of Uthmanic Corpus\n\nhere\n.\n\n\nThere are \nspecial recitation symbols\n \u0645\u0635\u0637\u0644\u062d\u0627\u062a \u0627\u0644\u0636\u0628\u0637 in the \nUthmani Text\n, they are a guide for the reciter\nto know the right positions to pause and the rules of tajweed.\nWe provide an interface to filter those symbols, \nonly the fly while fetching from the corpus\n,\nwe \nDO NOT\n change the corpus, NEVER.\n\n\nFor the full details about filtering \nspecial recitation symbols\n \u0645\u0635\u0637\u0644\u062d\u0627\u062a\n\u0627\u0644\u0636\u0628\u0637.\n\n\nContributing\n\n\nTo contribute and maintain \nPyQuran\n, Please read  \nCONTRIBUTING.md\n.\n\n\nCiting\n\n\n@MISC {PyQuran2018,\nauthor = \"Waleed A. Yousef and \n          Taha M. Madbouly and\n          Omar M. Ibrahime and\n          Ali H. El-Kassas and\n          Ali O. Hassan and\n          Abdallah R. Albohy\",\ntitle = \"PyQuran: The Python package for Quranic Analysis\",\nhowpublished = \"https://hci-lab.github.io/PyQuran-Private\",\nyear = \"2018\"}\n\n\n\n\nCommunication\n\n\nAuthor Page",
            "title": "Home"
        },
        {
            "location": "/#pyquran-the-python-package-for-quranic-analysis",
            "text": "PyQuran is a package which provides tools for  Quranic Analysis .  It is still a small package which needs a lot of your effort. We believe that it\nis a seed of a fundamental general package for\ncomputations on  Quran  with Python, even at the most basic level which simply retrieving Quran text.  Before Islam , Arabic letters  were without  dots\u2014 rasm , which resulted in ambiguty, two or three\nletters had the same rasm/form/shape/look.   Muslims have decided to remove this ambiguity by adding\ndots above or below each letter of the ones which share the same rasm. Now each letter has a unique form. By the way,\noriginally,  Quran  was written without dots on the letters.  To enable you to use both modern system or other, we introduce  alphabetical systems ,\nIt is a dynamic construction of letters\u2014 Alphabetical Systems .",
            "title": "PyQuran: The Python package for Quranic Analysis"
        },
        {
            "location": "/#current-features",
            "text": "Quran Retrieving.  Advanced Searching, by Text and Diacritics Patterns.  Buckwalter Transliteration, back and forth.  Multiple  alphabetical systems .  Words Frequency Table \u0627\u0644\u0645\u0639\u062c\u0645 \u0627\u0644\u062a\u0631\u062f\u062f\u0649 \u0644\u0644\u0623\u0644\u0641\u0627\u0638 .",
            "title": "Current Features"
        },
        {
            "location": "/#install",
            "text": "From  PyPI :  $ pip3 install pyquran  From Source:  $ python3 setup.py install",
            "title": "Install"
        },
        {
            "location": "/#dependencies",
            "text": "numpy  pyarabic",
            "title": "Dependencies"
        },
        {
            "location": "/#quran-corpus",
            "text": "We use  tanzil  Quran Corpus ( Uthmani Text ), it is in  UTF-8  encoding. You\ncan find all unique characters of Uthmanic Corpus here .  There are  special recitation symbols  \u0645\u0635\u0637\u0644\u062d\u0627\u062a \u0627\u0644\u0636\u0628\u0637 in the  Uthmani Text , they are a guide for the reciter\nto know the right positions to pause and the rules of tajweed.\nWe provide an interface to filter those symbols,  only the fly while fetching from the corpus ,\nwe  DO NOT  change the corpus, NEVER.  For the full details about filtering  special recitation symbols  \u0645\u0635\u0637\u0644\u062d\u0627\u062a\n\u0627\u0644\u0636\u0628\u0637.",
            "title": "Quran Corpus"
        },
        {
            "location": "/#contributing",
            "text": "To contribute and maintain  PyQuran , Please read   CONTRIBUTING.md .",
            "title": "Contributing"
        },
        {
            "location": "/#citing",
            "text": "@MISC {PyQuran2018,\nauthor = \"Waleed A. Yousef and \n          Taha M. Madbouly and\n          Omar M. Ibrahime and\n          Ali H. El-Kassas and\n          Ali O. Hassan and\n          Abdallah R. Albohy\",\ntitle = \"PyQuran: The Python package for Quranic Analysis\",\nhowpublished = \"https://hci-lab.github.io/PyQuran-Private\",\nyear = \"2018\"}",
            "title": "Citing"
        },
        {
            "location": "/#communication",
            "text": "Author Page",
            "title": "Communication"
        },
        {
            "location": "/quran_tools/",
            "text": "Importing PyQuran\n\n\nimport pyquran as q\n\n\n\n\n\n\nQuran retrieving tools are in \nq.quran\n. \n\n\n\n\nget_sura\n\n\nget_sura(sura_number, with_tashkeel=False, basmalah=False)\n\n\n\n\nreturns a sura as a list of verses.\n\n\nArgs\n\n\n\n\n\n\nsura_number\n: 1 <= Integer <= 114, the ordered number of sura in Mushaf.\n\n\n\n\n\n\nwith_tashkeel\n: Boolean, if true return sura with tashkeel else return\n       without.\n\n\n\n\n\n\nbasmalah\n: Boolean, adding basmalah as aya.\n\n\n\n\n\n\nReturns\n\n\n\n\n[str]\n: a list of sura's ayat.\n\n\n\n\nNote\n\n\nIndex statrts at zero.\nSo if the order number of an aya is x, then it's at (x-1) in the returned\nlist.\n\n\nExample\n\n\n   q.quran.get_sura(108, with_tashkeel=True)\n\n   >>> ['\u0625\u0650\u0646\u0651\u064e\u0627 \u0623\u064e\u0639\u0652\u0637\u064e\u064a\u0652\u0646\u064e\u0643\u064e \u0627\u0644\u0652\u0643\u064e\u0648\u0652\u062b\u064e\u0631\u064e', '\u0641\u064e\u0635\u064e\u0644\u0651\u0650 \u0644\u0650\u0631\u064e\u0628\u0651\u0650\u0643\u064e \u0648\u064e\u0627\u0646\u0652\u062d\u064e\u0631\u0652', '\u0625\u0650\u0646\u0651\u064e \u0634\u064e\u0627\u0646\u0650\u0626\u064e\u0643\u064e \u0647\u064f\u0648\u064e \u0627\u0644\u0652\u0623\u064e\u0628\u0652\u062a\u064e\u0631\u064f']\n\n\n\n\n\n\nget_verse\n\n\nget_verse(sura_number, verse_number, with_tashkeel=False)\n\n\n\n\nget specific verse form specific chapter\n\n\nArgs\n\n\n\n\n\n\nsura_number\n: 1 <= Integer <= 114, the ordered number of sura in Mushaf.\n\n\n\n\n\n\nverse_number\n: Integer > 0,  number of verse.\n\n\n\n\n\n\nwith_tashkeel\n: Boolean, if true return sura with tashkeel else return\n           without.\n\n\n\n\n\n\nReturns\n\n\n\n\nstr\n:  a verse.\n\n\n\n\nExample\n\n\nq.quran.get_verse(sura_number=1, verse_number=2)\n\n>>> '\u0627\u0644\u062d\u0645\u062f \u0644\u0644\u0647 \u0631\u0628 \u0627\u0644\u0639\u0644\u0645\u064a\u0646'\n\n\n\n\n\n\nget_sura_number\n\n\nget_sura_number(sura_name)\n\n\n\n\nArgs\n\n\nsura_name (str) : string represents the sura name.\n\n\nReturns\n\n\n\n\nint\n: the sura number which name is sura_name.\n\n\n\n\nNote\n\n\nDo not forget that the index of the returned list starts at zero.\nSo if the order Sura number is x, then it's at (x-1) in the list.\n\n\nExample\n\n\npq.quran.get_sura_number('\u0627\u0644\u0645\u0644\u0643')\n\n>>> 67\n\n\n\n\n\n\nget_sura_name\n\n\nget_sura_name(sura_number=None)\n\n\n\n\nReturns the name of \nsura_number\n. If \nsura_number=None\n a list of all\nsura's names is retunred.\n\n\nArgs\n\n\n\n\nsura_number\n: Optional, 1 <= Integer <= 114, the ordered number of sura in Mushaf.\n\n\n\n\nReturns\n\n\n\n\n\n\nstr\n: the sura name which number is sura_number.\n\n\n\n\n\n\n[srt]\n: list of all suras' names (if the sura_number parameter is None).\n\n\n\n\n\n\nExample\n\n\nq.quran.get_sura_name(2)\n\n>>> '\u0627\u0644\u0628\u0642\u0631\u0629'",
            "title": "Quran Retrieving tools"
        },
        {
            "location": "/quran_tools/#importing-pyquran",
            "text": "import pyquran as q   Quran retrieving tools are in  q.quran .",
            "title": "Importing PyQuran"
        },
        {
            "location": "/quran_tools/#get_sura",
            "text": "get_sura(sura_number, with_tashkeel=False, basmalah=False)  returns a sura as a list of verses.  Args    sura_number : 1 <= Integer <= 114, the ordered number of sura in Mushaf.    with_tashkeel : Boolean, if true return sura with tashkeel else return\n       without.    basmalah : Boolean, adding basmalah as aya.    Returns   [str] : a list of sura's ayat.   Note  Index statrts at zero.\nSo if the order number of an aya is x, then it's at (x-1) in the returned\nlist.  Example     q.quran.get_sura(108, with_tashkeel=True)\n\n   >>> ['\u0625\u0650\u0646\u0651\u064e\u0627 \u0623\u064e\u0639\u0652\u0637\u064e\u064a\u0652\u0646\u064e\u0643\u064e \u0627\u0644\u0652\u0643\u064e\u0648\u0652\u062b\u064e\u0631\u064e', '\u0641\u064e\u0635\u064e\u0644\u0651\u0650 \u0644\u0650\u0631\u064e\u0628\u0651\u0650\u0643\u064e \u0648\u064e\u0627\u0646\u0652\u062d\u064e\u0631\u0652', '\u0625\u0650\u0646\u0651\u064e \u0634\u064e\u0627\u0646\u0650\u0626\u064e\u0643\u064e \u0647\u064f\u0648\u064e \u0627\u0644\u0652\u0623\u064e\u0628\u0652\u062a\u064e\u0631\u064f']",
            "title": "get_sura"
        },
        {
            "location": "/quran_tools/#get_verse",
            "text": "get_verse(sura_number, verse_number, with_tashkeel=False)  get specific verse form specific chapter  Args    sura_number : 1 <= Integer <= 114, the ordered number of sura in Mushaf.    verse_number : Integer > 0,  number of verse.    with_tashkeel : Boolean, if true return sura with tashkeel else return\n           without.    Returns   str :  a verse.   Example  q.quran.get_verse(sura_number=1, verse_number=2)\n\n>>> '\u0627\u0644\u062d\u0645\u062f \u0644\u0644\u0647 \u0631\u0628 \u0627\u0644\u0639\u0644\u0645\u064a\u0646'",
            "title": "get_verse"
        },
        {
            "location": "/quran_tools/#get_sura_number",
            "text": "get_sura_number(sura_name)  Args  sura_name (str) : string represents the sura name.  Returns   int : the sura number which name is sura_name.   Note  Do not forget that the index of the returned list starts at zero.\nSo if the order Sura number is x, then it's at (x-1) in the list.  Example  pq.quran.get_sura_number('\u0627\u0644\u0645\u0644\u0643')\n\n>>> 67",
            "title": "get_sura_number"
        },
        {
            "location": "/quran_tools/#get_sura_name",
            "text": "get_sura_name(sura_number=None)  Returns the name of  sura_number . If  sura_number=None  a list of all\nsura's names is retunred.  Args   sura_number : Optional, 1 <= Integer <= 114, the ordered number of sura in Mushaf.   Returns    str : the sura name which number is sura_number.    [srt] : list of all suras' names (if the sura_number parameter is None).    Example  q.quran.get_sura_name(2)\n\n>>> '\u0627\u0644\u0628\u0642\u0631\u0629'",
            "title": "get_sura_name"
        },
        {
            "location": "/arabic_tools/",
            "text": "Alphabets\n\n\nWe use \nPyArabic\n constants which\nrepresents letters, instead of writting Arabic in the code.\n\n\nhamza            = u'\\u0621'\nalef_mad         = u'\\u0622'\nalef_hamza_above = u'\\u0623'\nwaw_hamza        = u'\\u0624'\nalef_hamza_below = u'\\u0625'\nyeh_hamza        = u'\\u0626'\nalef             = u'\\u0627'\nbeh              = u'\\u0628'\nteh_marbuta      = u'\\u0629'\nteh              = u'\\u062a'\ntheh             = u'\\u062b'\njeem             = u'\\u062c'\nhah              = u'\\u062d'\nkhah             = u'\\u062e'\ndal              = u'\\u062f'\nthal             = u'\\u0630'\nreh              = u'\\u0631'\nzain             = u'\\u0632'\nseen             = u'\\u0633'\nsheen            = u'\\u0634'\nsad              = u'\\u0635'\ndad              = u'\\u0636'\ntah              = u'\\u0637'\nzah              = u'\\u0638'\nain              = u'\\u0639'\nghain            = u'\\u063a'\nfeh              = u'\\u0641'\nqaf              = u'\\u0642'\nkaf              = u'\\u0643'\nlam              = u'\\u0644'\nmeem             = u'\\u0645'\nnoon             = u'\\u0646'\nheh              = u'\\u0647'\nwaw              = u'\\u0648'\nalef_maksura     = u'\\u0649'\nyeh              = u'\\u064a'\nmadda_above      = u'\\u0653'\nhamza_above      = u'\\u0654'\nhamza_below      = u'\\u0655'\nalef_wasl        = u'\\u0671'\n\n\n\n\nAlphabetical Systems\n\n\nWe define \nalphabetical system\n as a dynamic construction of letters in which\nyou can treat a group of letters one letter. The default alphabet is a special\ncase of the Alphabetical System where each letter is treated as one letter.\n\n\nPredefined systems\n are stored in \nsystems\n object.\n\n\n\n\ndefault.\n\n\nwithout dots system.\n\n\nhamazat.\n\n\n\n\nExample:\n\n\nq.systems.withoutDots\nOut: \n[['\u0628', '\u062a', '\u062b', '\u0646'],\n ['\u062d', '\u062e', '\u062c'],\n ['\u062f', '\u0630'],\n ['\u0631', '\u0632'],\n ['\u0633', '\u0634'],\n ['\u0635', '\u0636'],\n ['\u0637', '\u0638'],\n ['\u0639', '\u063a'],\n ['\u0641', '\u0642']]\n\n\n\n\nConstructing a user-defined system\n:\n\n\nsystem = [[alef_hamza_above, alef],[beh, teh]]\n\n\n\n\nThe previous line of code means \"Treat \nalef_hamza_above\n and \nalef\n\nas the same one latter, also treat \nbeh\n and \nteh\n as one letter as well\"\n\n\nAnd then, a system can be applied to some text analysis functions like counting,\nfiltering, etc.\n\n\ncheck_system\n\n\ncheck_system(system, index=None)\n\n\n\n\nReturns the alphabet including treated-as-one letters. If you pass the index as the second optional arguement, it returns the letter of the that index only, not the hole alphabet.\n\n\nArgs\n\n\n\n\n\n\nsystem\n: [[char]], a list of letters, where each letter to be treated as\none letter are in one sub-list,  see  \nAlphabetical Systems\n.\n\n\n\n\n\n\nindex\n: Optional integer, is a index of a letter in the new system.\n\n\n\n\n\n\nReturns\n\n\n\n\nlist\n: full sorted system or a specific index.\n\n\n\n\nExample\n\n\nq.check_system([['alef', 'beh']])\n\n>>> [['\u0621'],\n['\u0622'],\n['\u0623', '\u0628'],\n['\u0624'],\n['\u0625'],\n['\u0626'],\n['\u0627'],\n['\u0629'],\n['\u062a'],\n['\u062b'],\n['\u062c'],\n['\u062d'],\n['\u062e'],\n['\u062f'],\n['\u0630'],\n['\u0631'],\n['\u0632'],\n['\u0633'],\n['\u0634'],\n['\u0635'],\n['\u0636'],\n['\u0637'],\n['\u0638'],\n['\u0639'],\n['\u063a'],\n['\u0641'],\n['\u0642'],\n['\u0643'],\n['\u0644'],\n['\u0645'],\n['\u0646'],\n['\u0647'],\n['\u0648'],\n['\u0649'],\n['\u064a']]\n\n\n\n\nThe previous example prints each letter as one element in a new alphabet list,\nas you can see the two letters alef and beh are considered one letter.\n\n\n\n\nshape\n\n\nshape(system)\n\n\n\n\nshape declare a new system for alphabets ,user pass the alphabets \"in a list of list\"\n   that want to count it as on shape \"inner list\" and returns a dictionary has the same value\n   for each set of alphabets and diffrent values for the rest of alphabets\n\n\nArgs\n\n\nparam1 ([[char]]): a list of list of alphabets , each inner list have\n          alphabets that with be count  as one shape .\n\n\nReturns\n\n\n\n\ndictionary\n: with all alphabets, where each char \"key\"  have a value\nvalue will be equals for alphabets that will be count as oe shape\n\n\n\n\n\n\nfactor_alef_mad\n\n\nfactor_alef_mad(sentance)\n\n\n\n\nIt returns the \nsentance\n having alef_mad factored into alef_hamza and alef_wasel.\n\n\nArgs\n\n\n\n\nsentance\n: str, a string or list.\n\n\n\n\nReturns\n\n\n\n\nstr\n: sentance having the alef_mad factored\n\n\n\n\nExample\n\n\nq.unpack_alef_mad('\u0622')\n\n>>> '\u0623\u0652\u0623\u064e'\n\n\n\n\n\n\ngrouping_letter_diacritics\n\n\ngrouping_letter_diacritics(sentance)\n\n\n\n\nGrouping each letter with its diacritics.\n\n\nArgs\n\n\n\n\nsentance\n: str\n\n\n\n\nReturns\n\n\n\n\n[str]\n: a list of \nx\n, where \nx\n is the letter accompanied with its\ndiacritics.\n\n\n\n\nExample\n\n\nq.separate_token_with_dicrites('\u0625\u0650\u0646\u0651\u064e\u0627 \u0623\u064e\u0639\u0652\u0637\u064e\u064a\u0652\u0646\u064e\u0643\u064e \u0627\u0644\u0652\u0643\u064e\u0648\u0652\u062b\u064e\u0631\u064e')\n\n>>> ['\u0625\u0650', '\u0646\u0651\u064e', '\u0627', ' ', '\u0623\u064e', '\u0639\u0652', '\u0637\u064e', '\u064a\u0652', '\u0646\u064e', '\u0643\u064e', ' ', '\u0627', '\u0644\u0652', '\u0643\u064e', '\u0648\u0652', '\u062b\u064e', '\u0631\u064e']\n\n\n\n\n\n\nalphabet_excluding\n\n\nalphabet_excluding(excludedLetters)\n\n\n\n\nreturns the alphabet excluding \nexcludedLetters\n.\n\n\nArgs\n\n\n\n\nexcludedLetters\n: list[Char], letters to be excluded from the alphabet.\n\n\n\n\nReturns\n\n\n\n\nstr\n: alphabet excluding  \nexcludedLetters\n.\n\n\n\n\nExample\n\n\n q.alphabet_excluding([q.alef, q.beh, q.qaf, q.teh, q.dal, q.yeh, q.alef_mad])\n >>>\n ['\u0621',\n '\u0654',\n '\u0623',\n '\u0624',\n '\u0625',\n '\u0626',\n '\u0629',\n '\u062b',\n '\u062c',\n '\u062d',\n '\u062e',\n '\u0630',\n '\u0631',\n '\u0632',\n '\u0633',\n '\u0634',\n '\u0635',\n '\u0636',\n '\u0637',\n '\u0638',\n '\u0639',\n '\u063a',\n '\u0641',\n '\u0643',\n '\u0644',\n '\u0645',\n '\u0646',\n '\u0647',\n '\u0648',\n '\u0649']\n\n\n\n\n\n\nstrip_tashkeel\n\n\nstrip_tashkeel(string)\n\n\n\n\nconvert any letter in the \nlistOfLetter\n to \nletter\n in the given text\n\n\nArgs\n\n\n\n\nstring\n: str, to drop tashkeel from.\n\n\n\n\nExample\n\n\nx = q.quran.get_verse(12, 2, with_tashkeel=True)\nx\n>>> '\u0625\u0650\u0646\u0651\u064e\u0627 \u0623\u064e\u0646\u0632\u064e\u0644\u0652\u0646\u064e\u0647\u064f \u0642\u064f\u0631\u0652\u0621\u064e\u0646\u064b\u0627 \u0639\u064e\u0631\u064e\u0628\u0650\u064a\u0651\u064b\u0627 \u0644\u0651\u064e\u0639\u064e\u0644\u0651\u064e\u0643\u064f\u0645\u0652 \u062a\u064e\u0639\u0652\u0642\u0650\u0644\u064f\u0648\u0646\u064e'\n\nq.strip_tashkeel(x)\n>>> '\u0625\u0646\u0627 \u0623\u0646\u0632\u0644\u0646\u0647 \u0642\u0631\u0621\u0646\u0627 \u0639\u0631\u0628\u064a\u0627 \u0644\u0639\u0644\u0643\u0645 \u062a\u0639\u0642\u0644\u0648\u0646'\n\n\n\n\n\n\nbuckwalter_transliteration\n\n\nbuckwalter_transliteration(string, reverse=False)\n\n\n\n\nBack and forth Arabic-Bauckwalter transliteration.\n  Revise \nBuckwalter\n\n\nArgs\n\n\n\n\n\n\nstring\n: to be transliterated.\n\n\n\n\n\n\nreverse\n: Optional boolean. \nFalse\n transliterates from Arabic to\n Bauckwalter, \nTrue\n transliterates from Bauckwalter to Arabic.\n\n\n\n\n\n\nReturns\n\n\n\n\nstr\n: transliterated string.\n\n\n\n\nExample\n\n\nq.buckwalter_transliteration('\u0625\u0650\u0646\u0651\u064e\u0627 \u0623\u064e\u0639\u0652\u0637\u064e\u064a\u0652\u0646\u064e\u0643\u064e \u0627\u0644\u0652\u0643\u064e\u0648\u0652\u062b\u064e\u0631\u064e')\n\n>>> <in~aA >aEoTayonaka Alokawovara",
            "title": "Arabic tools"
        },
        {
            "location": "/arabic_tools/#alphabets",
            "text": "We use  PyArabic  constants which\nrepresents letters, instead of writting Arabic in the code.  hamza            = u'\\u0621'\nalef_mad         = u'\\u0622'\nalef_hamza_above = u'\\u0623'\nwaw_hamza        = u'\\u0624'\nalef_hamza_below = u'\\u0625'\nyeh_hamza        = u'\\u0626'\nalef             = u'\\u0627'\nbeh              = u'\\u0628'\nteh_marbuta      = u'\\u0629'\nteh              = u'\\u062a'\ntheh             = u'\\u062b'\njeem             = u'\\u062c'\nhah              = u'\\u062d'\nkhah             = u'\\u062e'\ndal              = u'\\u062f'\nthal             = u'\\u0630'\nreh              = u'\\u0631'\nzain             = u'\\u0632'\nseen             = u'\\u0633'\nsheen            = u'\\u0634'\nsad              = u'\\u0635'\ndad              = u'\\u0636'\ntah              = u'\\u0637'\nzah              = u'\\u0638'\nain              = u'\\u0639'\nghain            = u'\\u063a'\nfeh              = u'\\u0641'\nqaf              = u'\\u0642'\nkaf              = u'\\u0643'\nlam              = u'\\u0644'\nmeem             = u'\\u0645'\nnoon             = u'\\u0646'\nheh              = u'\\u0647'\nwaw              = u'\\u0648'\nalef_maksura     = u'\\u0649'\nyeh              = u'\\u064a'\nmadda_above      = u'\\u0653'\nhamza_above      = u'\\u0654'\nhamza_below      = u'\\u0655'\nalef_wasl        = u'\\u0671'",
            "title": "Alphabets"
        },
        {
            "location": "/arabic_tools/#alphabetical-systems",
            "text": "We define  alphabetical system  as a dynamic construction of letters in which\nyou can treat a group of letters one letter. The default alphabet is a special\ncase of the Alphabetical System where each letter is treated as one letter.  Predefined systems  are stored in  systems  object.   default.  without dots system.  hamazat.   Example:  q.systems.withoutDots\nOut: \n[['\u0628', '\u062a', '\u062b', '\u0646'],\n ['\u062d', '\u062e', '\u062c'],\n ['\u062f', '\u0630'],\n ['\u0631', '\u0632'],\n ['\u0633', '\u0634'],\n ['\u0635', '\u0636'],\n ['\u0637', '\u0638'],\n ['\u0639', '\u063a'],\n ['\u0641', '\u0642']]  Constructing a user-defined system :  system = [[alef_hamza_above, alef],[beh, teh]]  The previous line of code means \"Treat  alef_hamza_above  and  alef \nas the same one latter, also treat  beh  and  teh  as one letter as well\"  And then, a system can be applied to some text analysis functions like counting,\nfiltering, etc.",
            "title": "Alphabetical Systems"
        },
        {
            "location": "/arabic_tools/#check_system",
            "text": "check_system(system, index=None)  Returns the alphabet including treated-as-one letters. If you pass the index as the second optional arguement, it returns the letter of the that index only, not the hole alphabet.  Args    system : [[char]], a list of letters, where each letter to be treated as\none letter are in one sub-list,  see   Alphabetical Systems .    index : Optional integer, is a index of a letter in the new system.    Returns   list : full sorted system or a specific index.   Example  q.check_system([['alef', 'beh']])\n\n>>> [['\u0621'],\n['\u0622'],\n['\u0623', '\u0628'],\n['\u0624'],\n['\u0625'],\n['\u0626'],\n['\u0627'],\n['\u0629'],\n['\u062a'],\n['\u062b'],\n['\u062c'],\n['\u062d'],\n['\u062e'],\n['\u062f'],\n['\u0630'],\n['\u0631'],\n['\u0632'],\n['\u0633'],\n['\u0634'],\n['\u0635'],\n['\u0636'],\n['\u0637'],\n['\u0638'],\n['\u0639'],\n['\u063a'],\n['\u0641'],\n['\u0642'],\n['\u0643'],\n['\u0644'],\n['\u0645'],\n['\u0646'],\n['\u0647'],\n['\u0648'],\n['\u0649'],\n['\u064a']]  The previous example prints each letter as one element in a new alphabet list,\nas you can see the two letters alef and beh are considered one letter.",
            "title": "check_system"
        },
        {
            "location": "/arabic_tools/#shape",
            "text": "shape(system)  shape declare a new system for alphabets ,user pass the alphabets \"in a list of list\"\n   that want to count it as on shape \"inner list\" and returns a dictionary has the same value\n   for each set of alphabets and diffrent values for the rest of alphabets  Args  param1 ([[char]]): a list of list of alphabets , each inner list have\n          alphabets that with be count  as one shape .  Returns   dictionary : with all alphabets, where each char \"key\"  have a value\nvalue will be equals for alphabets that will be count as oe shape",
            "title": "shape"
        },
        {
            "location": "/arabic_tools/#factor_alef_mad",
            "text": "factor_alef_mad(sentance)  It returns the  sentance  having alef_mad factored into alef_hamza and alef_wasel.  Args   sentance : str, a string or list.   Returns   str : sentance having the alef_mad factored   Example  q.unpack_alef_mad('\u0622')\n\n>>> '\u0623\u0652\u0623\u064e'",
            "title": "factor_alef_mad"
        },
        {
            "location": "/arabic_tools/#grouping_letter_diacritics",
            "text": "grouping_letter_diacritics(sentance)  Grouping each letter with its diacritics.  Args   sentance : str   Returns   [str] : a list of  x , where  x  is the letter accompanied with its\ndiacritics.   Example  q.separate_token_with_dicrites('\u0625\u0650\u0646\u0651\u064e\u0627 \u0623\u064e\u0639\u0652\u0637\u064e\u064a\u0652\u0646\u064e\u0643\u064e \u0627\u0644\u0652\u0643\u064e\u0648\u0652\u062b\u064e\u0631\u064e')\n\n>>> ['\u0625\u0650', '\u0646\u0651\u064e', '\u0627', ' ', '\u0623\u064e', '\u0639\u0652', '\u0637\u064e', '\u064a\u0652', '\u0646\u064e', '\u0643\u064e', ' ', '\u0627', '\u0644\u0652', '\u0643\u064e', '\u0648\u0652', '\u062b\u064e', '\u0631\u064e']",
            "title": "grouping_letter_diacritics"
        },
        {
            "location": "/arabic_tools/#alphabet_excluding",
            "text": "alphabet_excluding(excludedLetters)  returns the alphabet excluding  excludedLetters .  Args   excludedLetters : list[Char], letters to be excluded from the alphabet.   Returns   str : alphabet excluding   excludedLetters .   Example   q.alphabet_excluding([q.alef, q.beh, q.qaf, q.teh, q.dal, q.yeh, q.alef_mad])\n >>>\n ['\u0621',\n '\u0654',\n '\u0623',\n '\u0624',\n '\u0625',\n '\u0626',\n '\u0629',\n '\u062b',\n '\u062c',\n '\u062d',\n '\u062e',\n '\u0630',\n '\u0631',\n '\u0632',\n '\u0633',\n '\u0634',\n '\u0635',\n '\u0636',\n '\u0637',\n '\u0638',\n '\u0639',\n '\u063a',\n '\u0641',\n '\u0643',\n '\u0644',\n '\u0645',\n '\u0646',\n '\u0647',\n '\u0648',\n '\u0649']",
            "title": "alphabet_excluding"
        },
        {
            "location": "/arabic_tools/#strip_tashkeel",
            "text": "strip_tashkeel(string)  convert any letter in the  listOfLetter  to  letter  in the given text  Args   string : str, to drop tashkeel from.   Example  x = q.quran.get_verse(12, 2, with_tashkeel=True)\nx\n>>> '\u0625\u0650\u0646\u0651\u064e\u0627 \u0623\u064e\u0646\u0632\u064e\u0644\u0652\u0646\u064e\u0647\u064f \u0642\u064f\u0631\u0652\u0621\u064e\u0646\u064b\u0627 \u0639\u064e\u0631\u064e\u0628\u0650\u064a\u0651\u064b\u0627 \u0644\u0651\u064e\u0639\u064e\u0644\u0651\u064e\u0643\u064f\u0645\u0652 \u062a\u064e\u0639\u0652\u0642\u0650\u0644\u064f\u0648\u0646\u064e'\n\nq.strip_tashkeel(x)\n>>> '\u0625\u0646\u0627 \u0623\u0646\u0632\u0644\u0646\u0647 \u0642\u0631\u0621\u0646\u0627 \u0639\u0631\u0628\u064a\u0627 \u0644\u0639\u0644\u0643\u0645 \u062a\u0639\u0642\u0644\u0648\u0646'",
            "title": "strip_tashkeel"
        },
        {
            "location": "/arabic_tools/#buckwalter_transliteration",
            "text": "buckwalter_transliteration(string, reverse=False)  Back and forth Arabic-Bauckwalter transliteration.\n  Revise  Buckwalter  Args    string : to be transliterated.    reverse : Optional boolean.  False  transliterates from Arabic to\n Bauckwalter,  True  transliterates from Bauckwalter to Arabic.    Returns   str : transliterated string.   Example  q.buckwalter_transliteration('\u0625\u0650\u0646\u0651\u064e\u0627 \u0623\u064e\u0639\u0652\u0637\u064e\u064a\u0652\u0646\u064e\u0643\u064e \u0627\u0644\u0652\u0643\u064e\u0648\u0652\u062b\u064e\u0631\u064e')\n\n>>> <in~aA >aEoTayonaka Alokawovara",
            "title": "buckwalter_transliteration"
        },
        {
            "location": "/analysis_tools/",
            "text": "count_shape\n\n\ncount_shape(text, system=None)\n\n\n\n\ncounts the occerences of each letter (As \nsystem\n defines) in sura.\n\n\nArgs\n\n\n\n\n\n\ntext\n: [str], a list of strings , each inner list is ayah .\n\n\n\n\n\n\nsystem\n: Optional, [[char]], revise \nAlphabetical Systems\n,\nif \nsystem\n is not passed, the normal alphabet is applied.\n\n\n\n\n\n\nReturns\n\n\n(N * P) ndarray (Matrix A): N is the number of verses, P is the alphabet (as defined in \nsystem\n).\n\n\nA[i][j]\n is the number of the letter \nj\n in the verse \ni\n.\n\n\nExample\n\n\nnewSystem = [[beh, teh, theh], [jeem, hah, khah]]\nq.count_shape(get_sura(110), newSystem)\n\n>>>[[1 2 1 0 0 0 1 0 4 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 3 0 1 1 1 0 0]\n[1 2 0 0 2 0 0 0 5 0 2 0 1 0 1 0 0 0 0 0 0 0 2 0 0 4 0 3 1 3 1 3]\n[6 2 0 0 0 0 1 0 4 0 1 0 2 0 2 0 0 0 0 0 0 1 2 0 2 0 1 2 2 2 0 0]]\n\n\n\n\n\n\nsearch_string_with_tashkeel\n\n\nsearch_string_with_tashkeel(string, key)\n\n\n\n\nArgs\n\n\n\n\n\n\nstring\n: str, sentence to search by key.\n\n\n\n\n\n\nkey\n: str, taskeel pattern.\n\n\n\n\n\n\nAssumption\n\n\nSearches tashkeel that is exciplitly included in string.\n\n\nReturns\n\n\n\n\n\n\nfind\n: list of pairs where x and y are the start and end index of the matched.\n\n\n\n\n\n\nnod-found\n: []\n\n\n\n\n\n\nExample\n\n\nstring = '\u0635\u0650\u0641\u0652 \u0630\u064e\u0627\u0652 \u062b\u064e\u0646\u064e\u0627\u0652 \u0643\u064e\u0645\u0652 \u062c\u064e\u0627\u0652\u062f\u064e \u0634\u064e\u062e\u0652\u0635\u064c'\nq.search_string_with_tashkeel(string, '\u064e\u0652')\n\n>>> [(3, 5), (7, 9), (10, 12), (13, 15), (17, 19)]\n\n\n\n\n\n\nfrequency_of_character\n\n\nfrequency_of_character(characters, verse=None, chapterNum=0, verseNum=0, with_tashkeel=False)\n\n\n\n\ncounts the number of characters in a specific verse or  sura or even the entrire Quran ,\n\n\nNote\n\n\nIf you don't pass verse and chapterNum he will get all Quran\n\n\nArgs\n\n\n\n\n\n\nverse\n: str, this verse that you need to count it and default is None.\n chapterNum, int, chapter number is a number of 'sura' that will count it , and default is 0.\n\n\n\n\n\n\nverseNum\n: int, verse number in sura.\n\n\n\n\n\n\nchracters\n: [], list of characters that you want to count them.\n\n\n\n\n\n\nwith_tashkeel\n: Bool, to check if you want to search with tashkeel.\n\n\n\n\n\n\nReturns\n\n\n{dic} : {str : int} a dictionary and keys is a characters\n     and value is count of every chracter.\n\n\nExample\n\n\npq.frequency_of_character(['\u0623',\"\u0628\",\"\u062a\u064f\"],verseNum=2,with_tashkeel=False)\n#that will count the vers number **2** in all swar\n>>> {'\u0623': 101, '\u0628': 133, '\u062a\u064f': 0}\n\npq.frequency_of_character(['\u0623',\"\u0628\",\"\u062a\u064f\"],chapterNum=1,verseNum=2,with_tashkeel=False)\n#that will count the vers number **2** in chapter **1**\n>>> {'\u0623': 0, '\u0628': 1, '\u062a\u064f': 0}\n\npq.frequency_of_character(['\u0623',\"\u0628\",\"\u062a\u064f\"],chapterNum=1,verseNum=2,with_tashkeel=False)\n#that will count in **all Quran**\n>>> {'\u0623': 8900, '\u0628': 11491, '\u062a\u064f': 2149}\n\n\n\n\n\n\n\ngenerate_frequency_dictionary\n\n\ngenerate_frequency_dictionary(suraNumber=None)\n\n\n\n\ncomputes the frequency dictionary; wher key is a unique word and values is the its occurrence.\n\n\nArgs\n\n\nsuraNumber (int): it's optional\n\n\nReturns\n\n\n\n\ndict\n: key is word, str; value is its occurrences, int.\n\n\n\n\nExample\n\n\npq.generate_frequency_dictionary(114)\n>>> {'\u0623\u0639\u0648\u0630': 1, '\u0625\u0644\u0647': 1, '\u0627\u0644\u062c\u0646\u0629': 1, '\u0627\u0644\u062e\u0646\u0627\u0633': 1, '\u0627\u0644\u0630\u0649': 1, '\u0627\u0644\u0646\u0627\u0633': 4, '\u0627\u0644\u0648\u0633\u0648\u0627\u0633': 1, '\u0628\u0631\u0628': 1, '\u0634\u0631': 1, '\u0635\u062f\u0648\u0631': 1, '\u0641\u0649': 1, '\u0642\u0644': 1, '\u0645\u0644\u0643': 1, '\u0645\u0646': 2, '\u0648\u0627\u0644\u0646\u0627\u0633': 1, '\u064a\u0648\u0633\u0648\u0633': 1}\n\n\n\n\n\n\nsort_dictionary_by_similarity\n\n\nsort_dictionary_by_similarity(frequency_dictionary, threshold=0.8)\n\n\n\n\nthis function using to cluster words using similarity\nand sort every bunch of word  by most common and sort bunches\ndescending in same time\n\n\nArgs\n\n\n\n\nfrequency_dictionary\n: dict, frequency dictionary to be sorted.\n\n\n\n\nReturns\n\n\ndict : {str: int} sorted dictionary\n\n\nExample\n\n\nfrequency_dic = pq.generate_frequency_dictionary(114)\npq.sort_dictionary_by_similarity(frequency_dic)\n# this dictionary is sorted using similarity 0.8\n>>> {'\u0623\u0639\u0648\u0630': 1, '\u0625\u0630\u0627': 2, '\u0627\u0644\u0639\u0642\u062f': 1, '\u0627\u0644\u0641\u0644\u0642': 1, '\u0627\u0644\u0646\u0641\u062b\u062a': 1, '\u0628\u0631\u0628': 1, '\u062d\u0627\u0633\u062f': 1, '\u062d\u0633\u062f': 1, '\u062e\u0644\u0642': 1, '\u0634\u0631': 4, '\u063a\u0627\u0633\u0642': 1, '\u0641\u0649': 1, '\u0642\u0644': 1, '\u0645\u0627': 1, '\u0645\u0646': 1, '\u0648\u0642\u0628': 1, '\u0648\u0645\u0646': 3}\n\n\n\n\n\n\ncheck_sura_with_frequency\n\n\ncheck_sura_with_frequency(sura_num, freq_dec)\n\n\n\n\nthis function check if frequency dictionary of specific sura is\ncompatible with original sura in shapes count\n\n\nArgs\n\n\nsuraNumber (int): sura number\n\n\nReturns\n\n\n\n\nBoolean\n: True :- if compatible\n     Flase :- if not\n\n\n\n\nExample\n\n\nfrequency_dic = pq.generate_frequency_dictionary(114)\npq.check_sura_with_frequency(frequency_dic)\n>>> True\n\n\n\n\n\n\nsearch_sequence\n\n\nsearch_sequence(sequancesList, verse=None, chapterNum=0, verseNum=0, mode=3)\n\n\n\n\ntake list of sequances and return matched sequance,\n   it search in verse ot chapter or All Quran ,\n   it return for every match :\n   1- matched sequance\n   2- chapter number of occurrence\n   3- token number if word and 0 if sentence\n\n\nNote :\n *if found verse != None it will use it en search .\n\n\n*if no verse and found chapterNum and verseNum it will\n  use this verse and use it to search.\n\n\n*if no verse and no verseNum and found chapterNum it will\n  search in chapter.\n\n\n*if no verse and no chapterNum and no verseNum it will\n  search in All Quran.\n\n\nit has many modes:\n1- search with decorated sequance (with tashkeel),\n   and return matched sequance with decorates (with tashkil).\n\n\n2- search without decorated sequance (without tashkeel),\n   and return matched sequance without decorates (without tashkil).\n\n\n3- search without decorated sequance (without tashkeel),\n   and return matched sequance with decorates (with tashkil).\n\n\nArgs\n\n\n\n\n\n\nchapterNum\n: int, number of chapter where function search.\n\n\n\n\n\n\nverseNum\n: int, number of verse wher function search.\n\n\n\n\n\n\nsequancesList\n: [], a list of sequances that you want to match them.\n\n\n\n\n\n\nmode\n: int, this mode that you need to use and default mode 3.\n\n\n\n\n\n\nReturns\n\n\n\n\ndict\n:  key is sequances and value is a list of matched_sequance and their positions.\n\n\n\n\nExample\n\n\n\n   __search in chapter = 1 only using mode 3 (default)__\n\npq.search_sequence(sequancesList=['\u0645\u0644\u0643 \u064a\u0648\u0645 \u0627\u0644\u062f\u064a\u0646'],chapterNum=1)\n#it will return\n#{'sequance-1' : [ (matched_sequance , position , vers_num , chapter_num) , (....) ],\n\n   __'sequance-2' : [ (matched_sequance , position , vers_num , chapter_num) , (....) ] }__\n\n\n   __Note : position == 0 if sequance is a sentence and == word position if sequance is a word__\n\n>>> {'\u0645\u0644\u0643 \u064a\u0648\u0645 \u0627\u0644\u062f\u064a\u0646': [('\u0645\u064e\u0644\u0650\u0643\u0650 \u064a\u064e\u0648\u0652\u0645\u0650 \u0627\u0644\u062f\u0651\u0650\u064a\u0646\u0650', 0, 4, 1)]}\n\n\n   __search in all Quran using mode 3 (default)__\n\npq.search_sequence(sequancesList=['\u0645\u0644\u0643 \u064a\u0648\u0645'])\n>>> {'\u0645\u0644\u0643 \u064a\u0648\u0645': [('\u0645\u064e\u0644\u0650\u0643\u0650 \u064a\u064e\u0648\u0652\u0645\u0650', 0, 4, 1),  ('\u0627\u0644\u0652\u0645\u064f\u0644\u0652\u0643\u064f \u064a\u064e\u0648\u0652\u0645\u064e', 0, 73, 6),  ('\u0627\u0644\u0652\u0645\u064f\u0644\u0652\u0643\u064f \u064a\u064e\u0648\u0652\u0645\u064e\u0626\u0650\u0630\u064d', 0, 56, 22),  ('\u0627\u0644\u0652\u0645\u064f\u0644\u0652\u0643\u064f \u064a\u064e\u0648\u0652\u0645\u064e\u0626\u0650\u0630\u064d', 0, 26, 25)]}",
            "title": "Analysis tools"
        },
        {
            "location": "/analysis_tools/#count_shape",
            "text": "count_shape(text, system=None)  counts the occerences of each letter (As  system  defines) in sura.  Args    text : [str], a list of strings , each inner list is ayah .    system : Optional, [[char]], revise  Alphabetical Systems ,\nif  system  is not passed, the normal alphabet is applied.    Returns  (N * P) ndarray (Matrix A): N is the number of verses, P is the alphabet (as defined in  system ).  A[i][j]  is the number of the letter  j  in the verse  i .  Example  newSystem = [[beh, teh, theh], [jeem, hah, khah]]\nq.count_shape(get_sura(110), newSystem)\n\n>>>[[1 2 1 0 0 0 1 0 4 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 3 0 1 1 1 0 0]\n[1 2 0 0 2 0 0 0 5 0 2 0 1 0 1 0 0 0 0 0 0 0 2 0 0 4 0 3 1 3 1 3]\n[6 2 0 0 0 0 1 0 4 0 1 0 2 0 2 0 0 0 0 0 0 1 2 0 2 0 1 2 2 2 0 0]]",
            "title": "count_shape"
        },
        {
            "location": "/analysis_tools/#search_string_with_tashkeel",
            "text": "search_string_with_tashkeel(string, key)  Args    string : str, sentence to search by key.    key : str, taskeel pattern.    Assumption  Searches tashkeel that is exciplitly included in string.  Returns    find : list of pairs where x and y are the start and end index of the matched.    nod-found : []    Example  string = '\u0635\u0650\u0641\u0652 \u0630\u064e\u0627\u0652 \u062b\u064e\u0646\u064e\u0627\u0652 \u0643\u064e\u0645\u0652 \u062c\u064e\u0627\u0652\u062f\u064e \u0634\u064e\u062e\u0652\u0635\u064c'\nq.search_string_with_tashkeel(string, '\u064e\u0652')\n\n>>> [(3, 5), (7, 9), (10, 12), (13, 15), (17, 19)]",
            "title": "search_string_with_tashkeel"
        },
        {
            "location": "/analysis_tools/#frequency_of_character",
            "text": "frequency_of_character(characters, verse=None, chapterNum=0, verseNum=0, with_tashkeel=False)  counts the number of characters in a specific verse or  sura or even the entrire Quran ,  Note  If you don't pass verse and chapterNum he will get all Quran  Args    verse : str, this verse that you need to count it and default is None.\n chapterNum, int, chapter number is a number of 'sura' that will count it , and default is 0.    verseNum : int, verse number in sura.    chracters : [], list of characters that you want to count them.    with_tashkeel : Bool, to check if you want to search with tashkeel.    Returns  {dic} : {str : int} a dictionary and keys is a characters\n     and value is count of every chracter.  Example  pq.frequency_of_character(['\u0623',\"\u0628\",\"\u062a\u064f\"],verseNum=2,with_tashkeel=False)\n#that will count the vers number **2** in all swar\n>>> {'\u0623': 101, '\u0628': 133, '\u062a\u064f': 0}\n\npq.frequency_of_character(['\u0623',\"\u0628\",\"\u062a\u064f\"],chapterNum=1,verseNum=2,with_tashkeel=False)\n#that will count the vers number **2** in chapter **1**\n>>> {'\u0623': 0, '\u0628': 1, '\u062a\u064f': 0}\n\npq.frequency_of_character(['\u0623',\"\u0628\",\"\u062a\u064f\"],chapterNum=1,verseNum=2,with_tashkeel=False)\n#that will count in **all Quran**\n>>> {'\u0623': 8900, '\u0628': 11491, '\u062a\u064f': 2149}",
            "title": "frequency_of_character"
        },
        {
            "location": "/analysis_tools/#generate_frequency_dictionary",
            "text": "generate_frequency_dictionary(suraNumber=None)  computes the frequency dictionary; wher key is a unique word and values is the its occurrence.  Args  suraNumber (int): it's optional  Returns   dict : key is word, str; value is its occurrences, int.   Example  pq.generate_frequency_dictionary(114)\n>>> {'\u0623\u0639\u0648\u0630': 1, '\u0625\u0644\u0647': 1, '\u0627\u0644\u062c\u0646\u0629': 1, '\u0627\u0644\u062e\u0646\u0627\u0633': 1, '\u0627\u0644\u0630\u0649': 1, '\u0627\u0644\u0646\u0627\u0633': 4, '\u0627\u0644\u0648\u0633\u0648\u0627\u0633': 1, '\u0628\u0631\u0628': 1, '\u0634\u0631': 1, '\u0635\u062f\u0648\u0631': 1, '\u0641\u0649': 1, '\u0642\u0644': 1, '\u0645\u0644\u0643': 1, '\u0645\u0646': 2, '\u0648\u0627\u0644\u0646\u0627\u0633': 1, '\u064a\u0648\u0633\u0648\u0633': 1}",
            "title": "generate_frequency_dictionary"
        },
        {
            "location": "/analysis_tools/#sort_dictionary_by_similarity",
            "text": "sort_dictionary_by_similarity(frequency_dictionary, threshold=0.8)  this function using to cluster words using similarity\nand sort every bunch of word  by most common and sort bunches\ndescending in same time  Args   frequency_dictionary : dict, frequency dictionary to be sorted.   Returns  dict : {str: int} sorted dictionary  Example  frequency_dic = pq.generate_frequency_dictionary(114)\npq.sort_dictionary_by_similarity(frequency_dic)\n# this dictionary is sorted using similarity 0.8\n>>> {'\u0623\u0639\u0648\u0630': 1, '\u0625\u0630\u0627': 2, '\u0627\u0644\u0639\u0642\u062f': 1, '\u0627\u0644\u0641\u0644\u0642': 1, '\u0627\u0644\u0646\u0641\u062b\u062a': 1, '\u0628\u0631\u0628': 1, '\u062d\u0627\u0633\u062f': 1, '\u062d\u0633\u062f': 1, '\u062e\u0644\u0642': 1, '\u0634\u0631': 4, '\u063a\u0627\u0633\u0642': 1, '\u0641\u0649': 1, '\u0642\u0644': 1, '\u0645\u0627': 1, '\u0645\u0646': 1, '\u0648\u0642\u0628': 1, '\u0648\u0645\u0646': 3}",
            "title": "sort_dictionary_by_similarity"
        },
        {
            "location": "/analysis_tools/#check_sura_with_frequency",
            "text": "check_sura_with_frequency(sura_num, freq_dec)  this function check if frequency dictionary of specific sura is\ncompatible with original sura in shapes count  Args  suraNumber (int): sura number  Returns   Boolean : True :- if compatible\n     Flase :- if not   Example  frequency_dic = pq.generate_frequency_dictionary(114)\npq.check_sura_with_frequency(frequency_dic)\n>>> True",
            "title": "check_sura_with_frequency"
        },
        {
            "location": "/analysis_tools/#search_sequence",
            "text": "search_sequence(sequancesList, verse=None, chapterNum=0, verseNum=0, mode=3)  take list of sequances and return matched sequance,\n   it search in verse ot chapter or All Quran ,\n   it return for every match :\n   1- matched sequance\n   2- chapter number of occurrence\n   3- token number if word and 0 if sentence  Note :\n *if found verse != None it will use it en search .  *if no verse and found chapterNum and verseNum it will\n  use this verse and use it to search.  *if no verse and no verseNum and found chapterNum it will\n  search in chapter.  *if no verse and no chapterNum and no verseNum it will\n  search in All Quran.  it has many modes:\n1- search with decorated sequance (with tashkeel),\n   and return matched sequance with decorates (with tashkil).  2- search without decorated sequance (without tashkeel),\n   and return matched sequance without decorates (without tashkil).  3- search without decorated sequance (without tashkeel),\n   and return matched sequance with decorates (with tashkil).  Args    chapterNum : int, number of chapter where function search.    verseNum : int, number of verse wher function search.    sequancesList : [], a list of sequances that you want to match them.    mode : int, this mode that you need to use and default mode 3.    Returns   dict :  key is sequances and value is a list of matched_sequance and their positions.   Example  \n   __search in chapter = 1 only using mode 3 (default)__\n\npq.search_sequence(sequancesList=['\u0645\u0644\u0643 \u064a\u0648\u0645 \u0627\u0644\u062f\u064a\u0646'],chapterNum=1)\n#it will return\n#{'sequance-1' : [ (matched_sequance , position , vers_num , chapter_num) , (....) ],\n\n   __'sequance-2' : [ (matched_sequance , position , vers_num , chapter_num) , (....) ] }__\n\n\n   __Note : position == 0 if sequance is a sentence and == word position if sequance is a word__\n\n>>> {'\u0645\u0644\u0643 \u064a\u0648\u0645 \u0627\u0644\u062f\u064a\u0646': [('\u0645\u064e\u0644\u0650\u0643\u0650 \u064a\u064e\u0648\u0652\u0645\u0650 \u0627\u0644\u062f\u0651\u0650\u064a\u0646\u0650', 0, 4, 1)]}\n\n\n   __search in all Quran using mode 3 (default)__\n\npq.search_sequence(sequancesList=['\u0645\u0644\u0643 \u064a\u0648\u0645'])\n>>> {'\u0645\u0644\u0643 \u064a\u0648\u0645': [('\u0645\u064e\u0644\u0650\u0643\u0650 \u064a\u064e\u0648\u0652\u0645\u0650', 0, 4, 1),  ('\u0627\u0644\u0652\u0645\u064f\u0644\u0652\u0643\u064f \u064a\u064e\u0648\u0652\u0645\u064e', 0, 73, 6),  ('\u0627\u0644\u0652\u0645\u064f\u0644\u0652\u0643\u064f \u064a\u064e\u0648\u0652\u0645\u064e\u0626\u0650\u0630\u064d', 0, 56, 22),  ('\u0627\u0644\u0652\u0645\u064f\u0644\u0652\u0643\u064f \u064a\u064e\u0648\u0652\u0645\u064e\u0626\u0650\u0630\u064d', 0, 26, 25)]}",
            "title": "search_sequence"
        },
        {
            "location": "/CONTRIBUTING/",
            "text": "Contributing to PyQuran\n\n\nWe use GitHub issues for reporting bugs and for feature requests.\n\n\nIf you want to give us a hand, you may pick one of the opened issues and solve a bug, implement a feature request\nor to suggest a new missing feature.\n\n\nReporting issues\n\n\nWhen reporting a bug, use GitHub issue with the \nBug label\n, please include  as \nmuch details as possible about:\n- your operating system.\n- your python version.\n- a self-contained code to reproduce and demonstrate the Bug.\n\n\nIssue will be closed if the Bug cannot be reproduced.\n\n\nFeature Request\n\n\nWhenever you think \nPyQuran\n is missing a feature, create a GitHub issue with \nFeature Request label\n,\ndefine what you want precisely and include sufficient examples to cover all the new feature aspects.\n\n\nIf you would like to implement it by yourself, please read the \nContributing Code\n section.\n\n\nContributing Code\n\n\n_not_completed\n\n\ncode conventions\n\n\nYour code have to meet \nthese standartds\n.\n\n\ncontributing flow\n\n\nAt first, fork the project \non GitHub\n,\nthen, create a \nfeature branch\n and start writing your changes. \nWe \nDO NOT\n accept changes to the \nmaster branch\n.\n\n\nOnce you are done, push the changes to \nyour feature branch\n, after that create a \npull request\n\nwith an expressive title and description.\n\n\ncommit messages\n\n\nIt is so important to commit properly\n, we expect you to commit every one logical change.\nA commit message should describe what have been changed, why, and reference issues fixed (if\nany). \n\n\nCommit Message Properties\n:\n1. The Fist line is the commit title, should be less then or equal 50 characters, it must be expressive.\n2. Keep the second line blank.\n3. Wrap all other lines in the message body at 80 columns.\n4. Include \nFixes #N\n, where \nN\n is the issue number the commit\n    fixes, if any.\n\n\nCommits should look like the following:\n\n\nexplain commit in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc.\n\nThe body of the commit message **can be several paragraphs**, and\nplease do proper word-wrap and keep columns shorter than about\n80 characters.\n\nFixes #101\n\n\n\n\nTests\n\n\nWe write a test module for every PyQuran module under \nPyQuran/testing\n.\n\n\nNaming\n\nIf the module is called \nX\n, then its testing module is called \ntest_X\n.\n\ntest_x\n must have tough unit tests for every single function. \n\n\nNote\n it is inevitable to run all testing modules before you make any pull\nrequest. Pull Requests will not be accepted if there is one fail in testing\nmodules. So, please run them all first.",
            "title": "Getting Started"
        },
        {
            "location": "/CONTRIBUTING/#contributing-to-pyquran",
            "text": "We use GitHub issues for reporting bugs and for feature requests.  If you want to give us a hand, you may pick one of the opened issues and solve a bug, implement a feature request\nor to suggest a new missing feature.",
            "title": "Contributing to PyQuran"
        },
        {
            "location": "/CONTRIBUTING/#reporting-issues",
            "text": "When reporting a bug, use GitHub issue with the  Bug label , please include  as \nmuch details as possible about:\n- your operating system.\n- your python version.\n- a self-contained code to reproduce and demonstrate the Bug.  Issue will be closed if the Bug cannot be reproduced.",
            "title": "Reporting issues"
        },
        {
            "location": "/CONTRIBUTING/#feature-request",
            "text": "Whenever you think  PyQuran  is missing a feature, create a GitHub issue with  Feature Request label ,\ndefine what you want precisely and include sufficient examples to cover all the new feature aspects.  If you would like to implement it by yourself, please read the  Contributing Code  section.",
            "title": "Feature Request"
        },
        {
            "location": "/CONTRIBUTING/#contributing-code",
            "text": "_not_completed",
            "title": "Contributing Code"
        },
        {
            "location": "/CONTRIBUTING/#code-conventions",
            "text": "Your code have to meet  these standartds .",
            "title": "code conventions"
        },
        {
            "location": "/CONTRIBUTING/#contributing-flow",
            "text": "At first, fork the project  on GitHub ,\nthen, create a  feature branch  and start writing your changes. \nWe  DO NOT  accept changes to the  master branch .  Once you are done, push the changes to  your feature branch , after that create a  pull request \nwith an expressive title and description.",
            "title": "contributing flow"
        },
        {
            "location": "/CONTRIBUTING/#commit-messages",
            "text": "It is so important to commit properly , we expect you to commit every one logical change.\nA commit message should describe what have been changed, why, and reference issues fixed (if\nany).   Commit Message Properties :\n1. The Fist line is the commit title, should be less then or equal 50 characters, it must be expressive.\n2. Keep the second line blank.\n3. Wrap all other lines in the message body at 80 columns.\n4. Include  Fixes #N , where  N  is the issue number the commit\n    fixes, if any.  Commits should look like the following:  explain commit in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc.\n\nThe body of the commit message **can be several paragraphs**, and\nplease do proper word-wrap and keep columns shorter than about\n80 characters.\n\nFixes #101",
            "title": "commit messages"
        },
        {
            "location": "/CONTRIBUTING/#tests",
            "text": "We write a test module for every PyQuran module under  PyQuran/testing .  Naming \nIf the module is called  X , then its testing module is called  test_X . test_x  must have tough unit tests for every single function.   Note  it is inevitable to run all testing modules before you make any pull\nrequest. Pull Requests will not be accepted if there is one fail in testing\nmodules. So, please run them all first.",
            "title": "Tests"
        },
        {
            "location": "/Wiki-Home/",
            "text": "Package Structure\n\n\nPyQuran\n is organized as the following:\n\n\n\n\ncore\n: contains main functions/modules.\n\n\ntools\n: contains helper functions/modules.\n\n\ntesting\n: contains unit tests for each module.\n\n\nQuranCorpus\n: contains Quran corpus and corpus hashes.\n\n\n\n\n.\n\u2502   README.md\n\u2502   setup.py\n|   __init__.py\n|       ...\n|\n\u2514\u2500\u2500\u2500core\n\u2502   \u2502   pyquran.py\n\u2502   \u2502      ...   \n|\n\u2514\u2500\u2500\u2500tools\n|   \u2502   filtering.py\n|   |      ...\n\u2502   \n\u2514\u2500\u2500\u2500testing\n|   \u2502   test_filtering.py\n|   |      ...\n\u2502   \n\u2514\u2500\u2500\u2500QuranCorpus\n    \u2502   quran-uthmani.xml\n    |      ...",
            "title": "Package Strucutre"
        },
        {
            "location": "/Wiki-Home/#package-structure",
            "text": "PyQuran  is organized as the following:   core : contains main functions/modules.  tools : contains helper functions/modules.  testing : contains unit tests for each module.  QuranCorpus : contains Quran corpus and corpus hashes.   .\n\u2502   README.md\n\u2502   setup.py\n|   __init__.py\n|       ...\n|\n\u2514\u2500\u2500\u2500core\n\u2502   \u2502   pyquran.py\n\u2502   \u2502      ...   \n|\n\u2514\u2500\u2500\u2500tools\n|   \u2502   filtering.py\n|   |      ...\n\u2502   \n\u2514\u2500\u2500\u2500testing\n|   \u2502   test_filtering.py\n|   |      ...\n\u2502   \n\u2514\u2500\u2500\u2500QuranCorpus\n    \u2502   quran-uthmani.xml\n    |      ...",
            "title": "Package Structure"
        },
        {
            "location": "/Filtering-Special-Recitation-Symbols/",
            "text": "Quran Corpus\n\n\nWe use the \nUthmani Text\n of Quran from \ntanzil\n.\n\nThis is the its hashing \nMD5 (quran-uthmani.xml) = 6aae945d556a1b28cfe682c0ea5ab518\n.\n\n\nRecitation Symbols\n\n\nQuran is  written in Arabic Alphabet, but the \nQuran scholars\n have put\nsome marks to help reciters and readers in pronouncing and give them some guidance like the kind of \nsome letters and pause marks.\n\n\nThose are the unique characters in the corpus.\n\n((Table Unicode | Symbol  | Kind {letter/mark}))\n\n\nFiltering Recitation Symbols\n\n\nWhile fetching from corpus, we run the following method to remove all\nthe recitation marks \nthey are NOT letters\n.\n\n\nThe only thing we replace, is the Alef wasl: \u0671, we add Alef: \u0627 instead, because alef wasl and alef are the same\none letter in Arabic, but alef wasl has a mark above it to indicate that it is not pronounced\nas a glottal stop in case of continuing, \nRead more about Alef Wasl\n.\n\n\nThis filtering is done in run time. We \ndo not\n change the corpus at all.\n\n\nsource\n\n\n\n\nAlso feel free to report any bugs or lingual errors, you are most welcome, just\nopen  an \nissue\n.",
            "title": "Quran Corpus"
        },
        {
            "location": "/Filtering-Special-Recitation-Symbols/#quran-corpus",
            "text": "We use the  Uthmani Text  of Quran from  tanzil . \nThis is the its hashing  MD5 (quran-uthmani.xml) = 6aae945d556a1b28cfe682c0ea5ab518 .",
            "title": "Quran Corpus"
        },
        {
            "location": "/Filtering-Special-Recitation-Symbols/#recitation-symbols",
            "text": "Quran is  written in Arabic Alphabet, but the  Quran scholars  have put\nsome marks to help reciters and readers in pronouncing and give them some guidance like the kind of \nsome letters and pause marks.  Those are the unique characters in the corpus. \n((Table Unicode | Symbol  | Kind {letter/mark}))",
            "title": "Recitation Symbols"
        },
        {
            "location": "/Filtering-Special-Recitation-Symbols/#filtering-recitation-symbols",
            "text": "While fetching from corpus, we run the following method to remove all\nthe recitation marks  they are NOT letters .  The only thing we replace, is the Alef wasl: \u0671, we add Alef: \u0627 instead, because alef wasl and alef are the same\none letter in Arabic, but alef wasl has a mark above it to indicate that it is not pronounced\nas a glottal stop in case of continuing,  Read more about Alef Wasl .  This filtering is done in run time. We  do not  change the corpus at all.  source   Also feel free to report any bugs or lingual errors, you are most welcome, just\nopen  an  issue .",
            "title": "Filtering Recitation Symbols"
        },
        {
            "location": "/code_conventions/",
            "text": "Code Conventions (DO NOT USE EMACS)\n\n\nThis helps everyone to read and maintain the code even when they maintains\nsomeone else code\n\n\nPlease restrict to the rules.\n\n\nRules\n\n\n\n\nA line \nmust not\n exceed \n80 character\n length.\n\n\nUse \nSpaces\n not \nTabs\n.\n\n\nAlways return to \nexample_google.py\n file.\n\n\nWe dissagree with \nexample_goole.py\n in variables naming ONLY, \n\n       and \nwe agree with it in the whole entire rest\n.\n\n\n\n\nNaming\n\n\n\n\nClass Name\n: \nPascalCase\n: initial letter is \nupper case\n\n\nExamples\n: \nClass, NewClass, ...\n\n\nFunction\n: \nsnake_case\n: Lowercase underscore-separated names.\n\n\nExamples\n: \nfoo, foo_name, ...\n\n\nVariables\n: \nlowerCamelCase\n: initial letter is \nlower case\n and rest are PascalCasee.\n\n\nExamples\n: \nvariable, varibaleName, ...\n\n\n\n\nFunction prototype\n\n\n\n\nFunctions should have a description followed by sections as in the following example.\n\n\nYou don't need to include all section, but include what makes the function as clear as possible.\n\n\nFunction prototypes also used for proposed functions\n.\n\n\n\n\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Here you write a  rigorous description of the function\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    Note:\n        Do not include the `self` parameter in the ``Args`` section.\n\n    \"\"\"\n    # Empty Line\n    pass # in case it is just a prototype (not implemented yet) \n\n\n\n\nGoogle Standards Example\n\n\n# -*- coding: utf-8 -*-\n\"\"\"Example Google style docstrings.\n\nThis module demonstrates documentation as specified by the `Google Python\nStyle Guide`_. Docstrings may extend over multiple lines. Sections are created\nwith a section header and a colon followed by a block of indented text.\n\nExample:\n    Examples can be given using either the ``Example`` or ``Examples``\n    sections. Sections support any reStructuredText formatting, including\n    literal blocks::\n\n        $ python example_google.py\n\nSection breaks are created by resuming unindented text. Section breaks\nare also implicitly created anytime a new section starts.\n\nAttributes:\n    module_level_variable1 (int): Module level variables may be documented in\n        either the ``Attributes`` section of the module docstring, or in an\n        inline docstring immediately following the variable.\n\n        Either form is acceptable, but the two should not be mixed. Choose\n        one convention to document module level variables and be consistent\n        with it.\n\nTodo:\n    * For module TODOs\n    * You have to also use ``sphinx.ext.todo`` extension\n\n.. _Google Python Style Guide:\n   http://google.github.io/styleguide/pyguide.html\n\n\"\"\"\n\nmodule_level_variable1 = 12345\n\nmodule_level_variable2 = 98765\n\"\"\"int: Module level variable documented inline.\n\nThe docstring may span multiple lines. The type may optionally be specified\non the first line, separated by a colon.\n\"\"\"\n\n\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\"\n\n\ndef function_with_pep484_type_annotations(param1: int, param2: str) -> bool:\n    \"\"\"Example function with PEP 484 type annotations.\n\n    Args:\n        param1: The first parameter.\n        param2: The second parameter.\n\n    Returns:\n        The return value. True for success, False otherwise.\n\n    \"\"\"\n\n\ndef module_level_function(param1, param2=None, *args, **kwargs):\n    \"\"\"This is an example of a module level function.\n\n    Function parameters should be documented in the ``Args`` section. The name\n    of each parameter is required. The type and description of each parameter\n    is optional, but should be included if not obvious.\n\n    If \\*args or \\*\\*kwargs are accepted,\n    they should be listed as ``*args`` and ``**kwargs``.\n\n    The format for a parameter is::\n\n        name (type): description\n            The description may span multiple lines. Following\n            lines should be indented. The \"(type)\" is optional.\n\n            Multiple paragraphs are supported in parameter\n            descriptions.\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (:obj:`str`, optional): The second parameter. Defaults to None.\n            Second line of description should be indented.\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        bool: True if successful, False otherwise.\n\n        The return type is optional and may be specified at the beginning of\n        the ``Returns`` section followed by a colon.\n\n        The ``Returns`` section may span multiple lines and paragraphs.\n        Following lines should be indented to match the first line.\n\n        The ``Returns`` section supports any reStructuredText formatting,\n        including literal blocks::\n\n            {\n                'param1': param1,\n                'param2': param2\n            }\n\n    Raises:\n        AttributeError: The ``Raises`` section is a list of all exceptions\n            that are relevant to the interface.\n        ValueError: If `param2` is equal to `param1`.\n\n    \"\"\"\n    if param1 == param2:\n        raise ValueError('param1 may not be equal to param2')\n    return True\n\n\ndef example_generator(n):\n    \"\"\"Generators have a ``Yields`` section instead of a ``Returns`` section.\n\n    Args:\n        n (int): The upper limit of the range to generate, from 0 to `n` - 1.\n\n    Yields:\n        int: The next number in the range of 0 to `n` - 1.\n\n    Examples:\n        Examples should be written in doctest format, and should illustrate how\n        to use the function.\n\n        >>> print([i for i in example_generator(4)])\n        [0, 1, 2, 3]\n\n    \"\"\"\n    for i in range(n):\n        yield i\n\n\nclass ExampleError(Exception):\n    \"\"\"Exceptions are documented in the same way as classes.\n\n    The __init__ method may be documented in either the class level\n    docstring, or as a docstring on the __init__ method itself.\n\n    Either form is acceptable, but the two should not be mixed. Choose one\n    convention to document the __init__ method and be consistent with it.\n\n    Note:\n        Do not include the `self` parameter in the ``Args`` section.\n\n    Args:\n        msg (str): Human readable string describing the exception.\n        code (:obj:`int`, optional): Error code.\n\n    Attributes:\n        msg (str): Human readable string describing the exception.\n        code (int): Exception error code.\n\n    \"\"\"\n\n    def __init__(self, msg, code):\n        self.msg = msg\n        self.code = code\n\n\nclass ExampleClass(object):\n    \"\"\"The summary line for a class docstring should fit on one line.\n\n    If the class has public attributes, they may be documented here\n    in an ``Attributes`` section and follow the same formatting as a\n    function's ``Args`` section. Alternatively, attributes may be documented\n    inline with the attribute's declaration (see __init__ method below).\n\n    Properties created with the ``@property`` decorator should be documented\n    in the property's getter method.\n\n    Attributes:\n        attr1 (str): Description of `attr1`.\n        attr2 (:obj:`int`, optional): Description of `attr2`.\n\n    \"\"\"\n\n    def __init__(self, param1, param2, param3):\n        \"\"\"Example of docstring on the __init__ method.\n\n        The __init__ method may be documented in either the class level\n        docstring, or as a docstring on the __init__ method itself.\n\n        Either form is acceptable, but the two should not be mixed. Choose one\n        convention to document the __init__ method and be consistent with it.\n\n        Note:\n            Do not include the `self` parameter in the ``Args`` section.\n\n        Args:\n            param1 (str): Description of `param1`.\n            param2 (:obj:`int`, optional): Description of `param2`. Multiple\n                lines are supported.\n            param3 (:obj:`list` of :obj:`str`): Description of `param3`.\n\n        \"\"\"\n        self.attr1 = param1\n        self.attr2 = param2\n        self.attr3 = param3  #: Doc comment *inline* with attribute\n\n        #: list of str: Doc comment *before* attribute, with type specified\n        self.attr4 = ['attr4']\n\n        self.attr5 = None\n        \"\"\"str: Docstring *after* attribute, with type specified.\"\"\"\n\n    @property\n    def readonly_property(self):\n        \"\"\"str: Properties should be documented in their getter method.\"\"\"\n        return 'readonly_property'\n\n    @property\n    def readwrite_property(self):\n        \"\"\":obj:`list` of :obj:`str`: Properties with both a getter and setter\n        should only be documented in their getter method.\n\n        If the setter method contains notable behavior, it should be\n        mentioned here.\n        \"\"\"\n        return ['readwrite_property']\n\n    @readwrite_property.setter\n    def readwrite_property(self, value):\n        value\n\n    def example_method(self, param1, param2):\n        \"\"\"Class methods are similar to regular functions.\n\n        Note:\n            Do not include the `self` parameter in the ``Args`` section.\n\n        Args:\n            param1: The first parameter.\n            param2: The second parameter.\n\n        Returns:\n            True if successful, False otherwise.\n\n        \"\"\"\n        return True\n\n    def __special__(self):\n        \"\"\"By default special members with docstrings are not included.\n\n        Special members are any methods or attributes that start with and\n        end with a double underscore. Any special member with a docstring\n        will be included in the output, if\n        ``napoleon_include_special_with_doc`` is set to True.\n\n        This behavior can be enabled by changing the following setting in\n        Sphinx's conf.py::\n\n            napoleon_include_special_with_doc = True\n\n        \"\"\"\n        pass\n\n    def __special_without_docstring__(self):\n        pass\n\n    def _private(self):\n        \"\"\"By default private members are not included.\n\n        Private members are any methods or attributes that start with an\n        underscore and are *not* special. By default they are not included\n        in the output.\n\n        This behavior can be changed such that private members *are* included\n        by changing the following setting in Sphinx's conf.py::\n\n            napoleon_include_private_with_doc = True\n\n        \"\"\"\n        pass\n\n    def _private_without_docstring(self):\n        pass",
            "title": "Code Conventios"
        },
        {
            "location": "/code_conventions/#code-conventions-do-not-use-emacs",
            "text": "This helps everyone to read and maintain the code even when they maintains\nsomeone else code  Please restrict to the rules.",
            "title": "Code Conventions (DO NOT USE EMACS)"
        },
        {
            "location": "/code_conventions/#rules",
            "text": "A line  must not  exceed  80 character  length.  Use  Spaces  not  Tabs .  Always return to  example_google.py  file.  We dissagree with  example_goole.py  in variables naming ONLY,  \n       and  we agree with it in the whole entire rest .",
            "title": "Rules"
        },
        {
            "location": "/code_conventions/#naming",
            "text": "Class Name :  PascalCase : initial letter is  upper case  Examples :  Class, NewClass, ...  Function :  snake_case : Lowercase underscore-separated names.  Examples :  foo, foo_name, ...  Variables :  lowerCamelCase : initial letter is  lower case  and rest are PascalCasee.  Examples :  variable, varibaleName, ...",
            "title": "Naming"
        },
        {
            "location": "/code_conventions/#function-prototype",
            "text": "Functions should have a description followed by sections as in the following example.  You don't need to include all section, but include what makes the function as clear as possible.  Function prototypes also used for proposed functions .   def function_with_types_in_docstring(param1, param2):\n    \"\"\"Here you write a  rigorous description of the function\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    Note:\n        Do not include the `self` parameter in the ``Args`` section.\n\n    \"\"\"\n    # Empty Line\n    pass # in case it is just a prototype (not implemented yet)",
            "title": "Function prototype"
        },
        {
            "location": "/code_conventions/#google-standards-example",
            "text": "# -*- coding: utf-8 -*-\n\"\"\"Example Google style docstrings.\n\nThis module demonstrates documentation as specified by the `Google Python\nStyle Guide`_. Docstrings may extend over multiple lines. Sections are created\nwith a section header and a colon followed by a block of indented text.\n\nExample:\n    Examples can be given using either the ``Example`` or ``Examples``\n    sections. Sections support any reStructuredText formatting, including\n    literal blocks::\n\n        $ python example_google.py\n\nSection breaks are created by resuming unindented text. Section breaks\nare also implicitly created anytime a new section starts.\n\nAttributes:\n    module_level_variable1 (int): Module level variables may be documented in\n        either the ``Attributes`` section of the module docstring, or in an\n        inline docstring immediately following the variable.\n\n        Either form is acceptable, but the two should not be mixed. Choose\n        one convention to document module level variables and be consistent\n        with it.\n\nTodo:\n    * For module TODOs\n    * You have to also use ``sphinx.ext.todo`` extension\n\n.. _Google Python Style Guide:\n   http://google.github.io/styleguide/pyguide.html\n\n\"\"\"\n\nmodule_level_variable1 = 12345\n\nmodule_level_variable2 = 98765\n\"\"\"int: Module level variable documented inline.\n\nThe docstring may span multiple lines. The type may optionally be specified\non the first line, separated by a colon.\n\"\"\"\n\n\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\"\n\n\ndef function_with_pep484_type_annotations(param1: int, param2: str) -> bool:\n    \"\"\"Example function with PEP 484 type annotations.\n\n    Args:\n        param1: The first parameter.\n        param2: The second parameter.\n\n    Returns:\n        The return value. True for success, False otherwise.\n\n    \"\"\"\n\n\ndef module_level_function(param1, param2=None, *args, **kwargs):\n    \"\"\"This is an example of a module level function.\n\n    Function parameters should be documented in the ``Args`` section. The name\n    of each parameter is required. The type and description of each parameter\n    is optional, but should be included if not obvious.\n\n    If \\*args or \\*\\*kwargs are accepted,\n    they should be listed as ``*args`` and ``**kwargs``.\n\n    The format for a parameter is::\n\n        name (type): description\n            The description may span multiple lines. Following\n            lines should be indented. The \"(type)\" is optional.\n\n            Multiple paragraphs are supported in parameter\n            descriptions.\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (:obj:`str`, optional): The second parameter. Defaults to None.\n            Second line of description should be indented.\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        bool: True if successful, False otherwise.\n\n        The return type is optional and may be specified at the beginning of\n        the ``Returns`` section followed by a colon.\n\n        The ``Returns`` section may span multiple lines and paragraphs.\n        Following lines should be indented to match the first line.\n\n        The ``Returns`` section supports any reStructuredText formatting,\n        including literal blocks::\n\n            {\n                'param1': param1,\n                'param2': param2\n            }\n\n    Raises:\n        AttributeError: The ``Raises`` section is a list of all exceptions\n            that are relevant to the interface.\n        ValueError: If `param2` is equal to `param1`.\n\n    \"\"\"\n    if param1 == param2:\n        raise ValueError('param1 may not be equal to param2')\n    return True\n\n\ndef example_generator(n):\n    \"\"\"Generators have a ``Yields`` section instead of a ``Returns`` section.\n\n    Args:\n        n (int): The upper limit of the range to generate, from 0 to `n` - 1.\n\n    Yields:\n        int: The next number in the range of 0 to `n` - 1.\n\n    Examples:\n        Examples should be written in doctest format, and should illustrate how\n        to use the function.\n\n        >>> print([i for i in example_generator(4)])\n        [0, 1, 2, 3]\n\n    \"\"\"\n    for i in range(n):\n        yield i\n\n\nclass ExampleError(Exception):\n    \"\"\"Exceptions are documented in the same way as classes.\n\n    The __init__ method may be documented in either the class level\n    docstring, or as a docstring on the __init__ method itself.\n\n    Either form is acceptable, but the two should not be mixed. Choose one\n    convention to document the __init__ method and be consistent with it.\n\n    Note:\n        Do not include the `self` parameter in the ``Args`` section.\n\n    Args:\n        msg (str): Human readable string describing the exception.\n        code (:obj:`int`, optional): Error code.\n\n    Attributes:\n        msg (str): Human readable string describing the exception.\n        code (int): Exception error code.\n\n    \"\"\"\n\n    def __init__(self, msg, code):\n        self.msg = msg\n        self.code = code\n\n\nclass ExampleClass(object):\n    \"\"\"The summary line for a class docstring should fit on one line.\n\n    If the class has public attributes, they may be documented here\n    in an ``Attributes`` section and follow the same formatting as a\n    function's ``Args`` section. Alternatively, attributes may be documented\n    inline with the attribute's declaration (see __init__ method below).\n\n    Properties created with the ``@property`` decorator should be documented\n    in the property's getter method.\n\n    Attributes:\n        attr1 (str): Description of `attr1`.\n        attr2 (:obj:`int`, optional): Description of `attr2`.\n\n    \"\"\"\n\n    def __init__(self, param1, param2, param3):\n        \"\"\"Example of docstring on the __init__ method.\n\n        The __init__ method may be documented in either the class level\n        docstring, or as a docstring on the __init__ method itself.\n\n        Either form is acceptable, but the two should not be mixed. Choose one\n        convention to document the __init__ method and be consistent with it.\n\n        Note:\n            Do not include the `self` parameter in the ``Args`` section.\n\n        Args:\n            param1 (str): Description of `param1`.\n            param2 (:obj:`int`, optional): Description of `param2`. Multiple\n                lines are supported.\n            param3 (:obj:`list` of :obj:`str`): Description of `param3`.\n\n        \"\"\"\n        self.attr1 = param1\n        self.attr2 = param2\n        self.attr3 = param3  #: Doc comment *inline* with attribute\n\n        #: list of str: Doc comment *before* attribute, with type specified\n        self.attr4 = ['attr4']\n\n        self.attr5 = None\n        \"\"\"str: Docstring *after* attribute, with type specified.\"\"\"\n\n    @property\n    def readonly_property(self):\n        \"\"\"str: Properties should be documented in their getter method.\"\"\"\n        return 'readonly_property'\n\n    @property\n    def readwrite_property(self):\n        \"\"\":obj:`list` of :obj:`str`: Properties with both a getter and setter\n        should only be documented in their getter method.\n\n        If the setter method contains notable behavior, it should be\n        mentioned here.\n        \"\"\"\n        return ['readwrite_property']\n\n    @readwrite_property.setter\n    def readwrite_property(self, value):\n        value\n\n    def example_method(self, param1, param2):\n        \"\"\"Class methods are similar to regular functions.\n\n        Note:\n            Do not include the `self` parameter in the ``Args`` section.\n\n        Args:\n            param1: The first parameter.\n            param2: The second parameter.\n\n        Returns:\n            True if successful, False otherwise.\n\n        \"\"\"\n        return True\n\n    def __special__(self):\n        \"\"\"By default special members with docstrings are not included.\n\n        Special members are any methods or attributes that start with and\n        end with a double underscore. Any special member with a docstring\n        will be included in the output, if\n        ``napoleon_include_special_with_doc`` is set to True.\n\n        This behavior can be enabled by changing the following setting in\n        Sphinx's conf.py::\n\n            napoleon_include_special_with_doc = True\n\n        \"\"\"\n        pass\n\n    def __special_without_docstring__(self):\n        pass\n\n    def _private(self):\n        \"\"\"By default private members are not included.\n\n        Private members are any methods or attributes that start with an\n        underscore and are *not* special. By default they are not included\n        in the output.\n\n        This behavior can be changed such that private members *are* included\n        by changing the following setting in Sphinx's conf.py::\n\n            napoleon_include_private_with_doc = True\n\n        \"\"\"\n        pass\n\n    def _private_without_docstring(self):\n        pass",
            "title": "Google Standards Example"
        },
        {
            "location": "/authors/",
            "text": "Authors\n\n\n\n\nDr. Waleed A. Yousef\n, Ph.D., \nHuman\n  Computer Interaction Laboratory (HCI Lab.)\n,\n  wyousef@fci.helwan.edu.eg.\n\n\nTaha M. Madbouly\n, B.Sc., tahamagdy@fci.helwan.edu.eg.\n\n\nOmar M. Ibrahime\n, B.Sc., umar.ibrahime@fci.helwan.edu.eg\n\n\nAli H. El-Kassas\n, B.Sc., alihassan2@fci.helwan.edu.eg\n\n\nAli O. Hassan\n, B.Sc., ali.osama@fci.helwan.edu.eg\n\n\nAbdallah R. Albohy\n, B.Sc. abdoengineer2015@gmail.com",
            "title": "Authors"
        },
        {
            "location": "/authors/#authors",
            "text": "Dr. Waleed A. Yousef , Ph.D.,  Human\n  Computer Interaction Laboratory (HCI Lab.) ,\n  wyousef@fci.helwan.edu.eg.  Taha M. Madbouly , B.Sc., tahamagdy@fci.helwan.edu.eg.  Omar M. Ibrahime , B.Sc., umar.ibrahime@fci.helwan.edu.eg  Ali H. El-Kassas , B.Sc., alihassan2@fci.helwan.edu.eg  Ali O. Hassan , B.Sc., ali.osama@fci.helwan.edu.eg  Abdallah R. Albohy , B.Sc. abdoengineer2015@gmail.com",
            "title": "Authors"
        }
    ]
}